#!/usr/bin/env python3

import sys
import json
from pathlib import Path

import numpy as np

from lm_polygraph.utils.normalize import get_mans_ues_metrics, filter_nans


hydra_config = Path(os.environ["HYDRA_CONFIG"])


@hydra.main(
    version_base=None,
    config_path=str(hydra_config.parent),
    config_name=str(hydra_config.name),
)
def fit(args):
    man_paths = args.man_paths
    ue_method_names = args.ue_method_names
    gen_metric_names = args.gen_metric_names

    ues, gen_metrics = get_mans_ues(man_paths,
                                    ue_method_names,
                                    gen_metric_names)

    for metric_name, metric_data in gen_metrics.items():
        for ue_method_name, ue_data in ues.items():
            filtered_gen_metrics, filtered_ues = filter_nans(metric_data, ue_data)
            # Do something with the filtered data

@hydra.main(
    version_base=None,
    config_path=str(hydra_config.parent),
    config_name=str(hydra_config.name),
)
def predict(args):
    pass

if __name__ == "__main__":
    _callable = sys.argv[1]

    if _callable == "fit":
        fit()
    elif _callable == "predict":
        predict()
    else:
        raise ValueError(f"Unknown action: {_callable}. Use 'fit' or 'predict'")
